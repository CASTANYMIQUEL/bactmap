/*
 * -------------------------------------------------
 *  nf-core/bactmap Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  // Container slug. Stable releases should specify release tag!
  //   Developmental code should specify :latest

  // Boilerplate options
  name = false
  awsqueue = false
  awsregion = 'eu-west-2'
  outdir = '.'
  tracedir = './'
}

profiles {
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
  standard {
    includeConfig 'conf/base.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/bactmap_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/bactmap_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/bactmap_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/bactmap_dag.svg"
}


manifest {
  name = 'nf-core/bactmap'
  author = 'Anthony Underwood'
  homePage = 'https://github.com/nf-core/bactmap'
  description = 'A mapping-based pipeline for creating a phylogeny from bacterial whole genome sequences'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.05.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
